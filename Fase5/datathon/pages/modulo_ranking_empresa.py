import pandas as pd
import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO
import re
import json
from modelo import SistemaRecomendacao
import apoio_tech as inteligencia_st
# Configura√ß√µes iniciais
st.title('Ranking de Vagas')



def extrair_json_colunas(df, colunas):
    """
    Extrai colunas espec√≠ficas de um DataFrame e converte para JSON.
    
    Par√¢metros:
    df (DataFrame): O DataFrame de entrada.
    colunas (list): Lista de nomes de colunas a serem extra√≠das.
    
    Retorna:
    str: String Dataframe atualizado com as colunas extra√≠das.
    """
    try:
        
        for coluna in colunas:
        # Normaliza o JSON da coluna e cria um novo DataFrame
            df_normalizado = pd.json_normalize(df[coluna])

            # Define um prefixo para as novas colunas para evitar conflitos
            df_normalizado = df_normalizado.add_prefix(f'{coluna}_')

            # Remove a coluna original com JSON
            df = df.drop(coluna, axis=1)

            # Concatena o DataFrame original com as novas colunas normalizadas
            df = pd.concat([df, df_normalizado], axis=1)            
        return df
    except KeyError as e:
        print(f"Erro: Coluna n√£o encontrada - {e}. Verifique os nomes das colunas.")
        KeyError(e)

@st.cache_data
def carregar_vagas():
    print("Carregando vagas...")
    with open('dataset/vagas.json', 'r', encoding='utf-8') as f:
        vagas = json.load(f)
    
    dados_vagas = []
    for id_vaga, info in vagas.items():
        dados_vagas.append({
            'id_vaga': id_vaga,
            'titulo': info.get('informacoes_basicas', {}).get('titulo_vaga', 'Sem t√≠tulo'),
            'descricao': f"{info.get('perfil_vaga', {}).get('principais_atividades', '')} {info.get('perfil_vaga', {}).get('competencia_tecnicas_e_comportamentais', '')}"
        })
    return pd.DataFrame(dados_vagas)

def main():
    st.subheader('Sistema de Recomenda√ß√£o de Candidatos')
    
    RANKING_DADOS_EXTERNOS = "Dados Externos (Upload Excel)"
    RANKING_DADOS_INTERNOS = "Dados Internos (Sistema)"
    
    tab_sistema, tab_documentacao = st.tabs(["Sistema", "Documenta√ß√£o"])

    uploaded_file = None
    
    with tab_sistema:
        # Passo 1: Sele√ß√£o da fonte de dados
        fonte_dados = st.radio(
            "Selecione a fonte de dados dos candidatos:",
            (RANKING_DADOS_EXTERNOS, RANKING_DADOS_INTERNOS),
            horizontal=True
        )
        
        df_candidatos = None
    
        # Passo 2: Carregamento dos candidatos
        if fonte_dados == RANKING_DADOS_EXTERNOS:
            col_download, col_upload  = st.columns(2,border=True)
            with col_download:
                st.markdown("## Carregar Candidatos via Excel")
                
                
                template_df = pd.DataFrame(columns=[
                    'id_candidato', 
                    'nome_candidato', 
                    'senioridade', 
                    'curriculo',
                    'informacoes_adicionais'
                ])
                    
                    
                buffer = BytesIO()
                with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:                    
                    worksheet = writer.book.add_worksheet('candidatos')
                    header_format = writer.book.add_format({'bold': True, 'align': 'left', 'valign': 'vcenter'})
                    left_align_format = writer.book.add_format({'align': 'left', 'valign': 'vcenter'})

                    for col_num, value in enumerate(template_df.columns.values):
                        worksheet.write(0, col_num, value, header_format)
                    
                    writer.sheets['candidatos'].set_column('B:B', 30, left_align_format)
                    writer.sheets['candidatos'].set_column('A:A', 15, left_align_format)  
                    writer.sheets['candidatos'].set_column('B:B', 30, left_align_format)  
                    writer.sheets['candidatos'].set_column('C:C', 25, left_align_format)
                    writer.sheets['candidatos'].set_column('D:D', 150, left_align_format)
                    writer.sheets['candidatos'].set_column('E:E', 150, left_align_format)
                    filter_range = 'A1:E1'
                    writer.sheets['candidatos'].autofilter(filter_range)
                
                st.download_button(
                    label="üì• Baixar Template",
                    data=buffer.getvalue(),
                    file_name="template_candidatos.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            with col_upload:
                
                uploaded_file = st.file_uploader("Carregar planilha de candidatos", type="xlsx")

        if uploaded_file is not None:
            try:

                df_candidatos = pd.read_excel(uploaded_file)

                # Valida√ß√£o das colunas do DataFrame
                colunas_obrigatorias = ['id_candidato', 'nome_candidato', 'senioridade', 'curriculo']
                colunas_faltantes = [col for col in colunas_obrigatorias if col not in df_candidatos.columns]

                if colunas_faltantes:
                    raise ValueError(
                        f"O arquivo Excel carregado n√£o cont√©m as seguintes colunas obrigat√≥rias: {', '.join(colunas_faltantes)}. "
                        "Por favor, verifique o arquivo ou baixe o template para o formato correto."
                    )
                if df_candidatos.empty:
                    st.warning("A planilha do Excel enviada est√° vazia. Verifique o arquivo carregado.")
                    st.stop()


                if df_candidatos[colunas_obrigatorias].isnull().any().any():
                    st.warning("Aten√ß√£o: Foram encontrados dados nulos na planilha. "
                            "Por favor, verifique e preencha todos os campos obrigat√≥rios.")
                    # Voc√™ pode decidir se quer parar o processamento aqui com st.stop() ou apenas avisar.

                    df_campos_faltantes = df_candidatos[colunas_obrigatorias].isna().sum().reset_index()

                    df_campos_faltantes.columns = ['Campo', 'Quantidade de Nulos']

                    st.dataframe(df_campos_faltantes, hide_index=True, use_container_width=True)
                    st.stop() # Descomente se a presen√ßa de nulos deve impedir o prosseguimento.
                st.success("Arquivo carregado com sucesso!")
                st.toast(f"{len(df_candidatos)} candidatos carregados", icon="üë•")
                st.markdown("### Dados dos Candidatos")

                # Inicializar o estado da pagina√ß√£o
                if 'current_page' not in st.session_state:
                    st.session_state.current_page = 0
                
                items_per_page = 10  # Defina quantos itens por p√°gina

                total_items = len(df_candidatos)  # Total de itens no DataFrame

                total_pages = (total_items + items_per_page - 1) // items_per_page

                start_idx = st.session_state.current_page * items_per_page
                end_idx = start_idx + items_per_page
                
                # Exibe a fatia do DataFrame para a p√°gina atual                
                st.dataframe(df_candidatos.iloc[start_idx:end_idx], hide_index=True)

                # Controles de Pagina√ß√£o
                col1, col2, col3 = st.columns([1,2,1])

                with col1:
                    if st.button("‚¨ÖÔ∏è Anterior", disabled=(st.session_state.current_page == 0)):
                        st.session_state.current_page -= 1
                        st.rerun()
                
                with col2:
                    st.write(f"P√°gina {st.session_state.current_page + 1} de {total_pages}")

                with col3:
                    if st.button("Pr√≥xima ‚û°Ô∏è", disabled=(st.session_state.current_page >= total_pages - 1)):
                        st.session_state.current_page += 1
                        st.rerun()
            except Exception as e:
                if isinstance(e, ValueError):
                    # Esta mensagem pode precisar de ajuste dependendo de como voc√™ quer tratar outros ValueErrors
                    st.error(f"Erro ao processar o arquivo Excel: {e}")
                       
        elif fonte_dados == RANKING_DADOS_INTERNOS:
                st.subheader("Carregar candidatos do sistema interno")  # Dados Internos
                try:
                    @st.cache_data
                    def carregar_dados_internos():                        
                        #with open('dataset/applicants.json', 'r', encoding='utf-8') as f:
                        #    candidatos = json.load(f)
                        
                        #dados = []
                        #for id_cand, info in candidatos.items():
                        #    dados.append({
                        #        'id_candidato': id_cand,
                        #        'nome_candidato': info.get('infos_basicas', {}).get('nome', '') or \
                        #            info.get('informacoes_pessoais', {}).get('nome', 'Nome n√£o informado'),
                        #        'senioridade': info.get('informacoes_profissionais', {}).get('nivel_profissional', 'N√£o especificado'),
                        #        'curriculo': info.get('cv_pt', 'Curr√≠culo n√£o dispon√≠vel')
                        #        #'curriculo': info.get('cv_pt', 'Curr√≠culo n√£o dispon√≠vel')
                        #    })
                        colunas_importantes = ["cv_pt", "cv_en", "informacoes_profissionais_titulo_profissional", "informacoes_profissionais_area_atuacao", "informacoes_profissionais_conhecimentos_tecnicos", "informacoes_profissionais_certificacoes", "informacoes_profissionais_outras_certificacoes", "informacoes_profissionais_nivel_profissional", "informacoes_profissionais_qualificacoes", "informacoes_profissionais_experiencias", "formacao_e_idiomas_nivel_academico", "formacao_e_idiomas_nivel_ingles", "formacao_e_idiomas_nivel_espanhol", "formacao_e_idiomas_outro_idioma", "formacao_e_idiomas_cursos", "formacao_e_idiomas_outro_curso"]
                        df_applicants = pd.read_json("dataset/applicants.json", encoding="utf-8")
                        df_applicants = df_applicants.T                        
                        colunas_applicants = df_applicants.columns.drop(['cv_pt','cv_en'])                        
                        df_applicants = extrair_json_colunas(df_applicants, list(colunas_applicants))                        
                        df_applicants.reset_index(names="id_candidato", inplace=True)
                        df_applicants['curriculo'] = df_applicants[colunas_importantes].fillna('').agg(' '.join, axis=1)
                        df_applicants.rename(columns={'infos_basicas_nome':'nome_candidato'}, inplace=True)

                        df_applicants = df_applicants[["id_candidato","nome_candidato", "curriculo"]]
                        df_applicants.dropna(axis=0, how='any', inplace=True)
                        print("PAssei aqui")
                        return pd.DataFrame(df_applicants)
                    
                    with st.spinner("Carregando base de candidatos..."):
                        df_candidatos = carregar_dados_internos()
                        st.toast(f"{len(df_candidatos)} candidatos carregados", icon="üë•")
                    
                    with st.expander("Visualizar base interna", expanded=False):
                        st.dataframe(df_candidatos.head(10), use_container_width=True)
                
                except Exception as e:
                    st.error(f"Erro ao carregar dados internos: {str(e)}")
                    st.stop()
            
        # S√≥ mostra o restante se os dados foram carregados corretamente        
        if df_candidatos is not None:            
            # Passo 3: Sele√ß√£o do m√©todo de defini√ß√£o da vaga
            st.divider()
            MODO_DESCRICAO = "Escrever descri√ß√£o manual"
            MODO_SELECAO_VAGA = "Selecionar vaga existente"
            
            st.markdown("### Quais as informa√ß√µes da vaga?")
            metodo_descricao = st.radio(
                "",
                (MODO_DESCRICAO, MODO_SELECAO_VAGA),
                horizontal=True
            )
            
            descricao_vaga = ""
            
            # Passo 4: Entrada dos dados da vaga
            if metodo_descricao == MODO_SELECAO_VAGA:
                print("Carregando vagas...")
                df_vagas = carregar_vagas()
                vagas_lista = [f"{row['id_vaga']} - {row['titulo']}" for _, row in df_vagas.iterrows()]
                
                col1, col2 = st.columns([2, 3])
                with col1:
                    vaga_selecionada = st.selectbox(
                        "Selecione uma vaga:",
                        options=vagas_lista,
                        index=0
                    )
                
                if vaga_selecionada:
                    id_vaga = vaga_selecionada.split(' - ')[0]
                    descricao_vaga = df_vagas[df_vagas['id_vaga'] == id_vaga]['descricao'].values[0]
                    
                    with col2:
                        with st.expander("Detalhes da vaga selecionada", expanded=True):
                            st.write(descricao_vaga)
            else:
                descricao_vaga = st.text_area("Descri√ß√£o detalhada da vaga:", height=200,
                                             placeholder="Insira os requisitos, responsabilidades e detalhes da vaga...")
            
            # Passo 5: Configura√ß√µes e gera√ß√£o
            if descricao_vaga:
                st.divider()
                num_candidatos = st.slider("N√∫mero de candidatos para recomendar:", 
                                         1, 10, 
                                         min(1, 10))
                
                if st.button("Gerar Recomenda√ß√µes", type="primary"):
                    with st.status("Processando recomenda√ß√µes...", expanded=True) as status:                        
                        instancia = SistemaRecomendacao()

                        instancia._carregar_modelo(
                            df_candidatos=df_candidatos,
                            model_path="modelo_final.keras"
                        )
                        descricao_vaga_melhorada = inteligencia_st.melhorar_descricao_vaga(descricao_vaga)
                        print(f"descri√ß√£o nova :{descricao_vaga_melhorada}")
                        st.write("üìä Calculando similaridades...")
                        resultados = instancia.recomendar_candidatos(
                            descricao_vaga=descricao_vaga_melhorada,
                            top_n=num_candidatos
                        )
                        
                        st.write("üßπ Processando resultados...")
                        resultados.fillna({
                            'senioridade': 'N√£o especificado',
                            'nome_candidato': 'Nome n√£o informado',
                            'cv_texto_pt': 'Curr√≠culo n√£o dispon√≠vel'
                        }, inplace=True)
                        
                        status.update(label="‚úÖ Processo completo!", state="complete", expanded=False)
                        st.balloons()
                    
                    st.divider()
                    st.subheader("Resultados da Recomenda√ß√£o")

                    if fonte_dados == RANKING_DADOS_INTERNOS:
                        resultados = resultados[['id_candidato', 'nome_candidato', 'curriculo', 'similaridade']]
                    
                    

                    st.dataframe(
                        resultados,                  
                        column_config={
                            "similaridade": st.column_config.ProgressColumn(
                                format="%.2f",
                                min_value=0,
                                max_value=1,
                                label="Similaridade"
                            )
                        },
                        use_container_width=True,
                        hide_index=True
                    )

    with tab_documentacao:
        st.markdown('''
        ### Documenta√ß√£o do M√≥dulo de Ranking de Vagas

        Este m√≥dulo foi projetado para auxiliar na prioriza√ß√£o de candidatos para vagas espec√≠ficas,
        utilizando diferentes fontes de dados. Ele permite gerar um ranking de candidatos
        com base em uma descri√ß√£o de vaga e um conjunto de dados de candidatos.

        #### Funcionalidades Principais (Aba "Sistema"):

        *   **Ranking com Dados Externos:**
            *   **Template de Candidatos:** Oferece um bot√£o para baixar um template Excel (`template_candidatos.xlsx`) que serve como modelo para a inser√ß√£o dos dados dos candidatos. O template j√° vem com formata√ß√£o e filtros no cabe√ßalho para facilitar o uso.
            *   Permite o upload de uma planilha Excel (.xlsx) contendo os dados dos candidatos.
            *   **Valida√ß√£o de Dados:** Ao carregar o arquivo, o sistema verifica:
                *   Se as colunas obrigat√≥rias (`id_candidato`, `nome_candidato`, `senioridade`, `curriculo`) est√£o presentes.
                *   Se a planilha n√£o est√° vazia.
                *   Se h√° dados nulos nas colunas obrigat√≥rias, exibindo um resumo dos campos faltantes.
            *   Exibe os dados dos candidatos carregados de forma paginada para f√°cil visualiza√ß√£o.
        *   **Ranking com Dados Internos:**
            *   Previsto para utilizar dados de candidatos provenientes de sistemas internos da organiza√ß√£o.
            *   (Funcionalidade a ser implementada ou detalhada conforme o sistema interno).

        #### Como Usar o M√≥dulo:

        1.  **Acesse a Aba "Sistema":**
            *   No menu lateral, navegue at√© "üìä Ranking Vagas".
            *   A interface principal do m√≥dulo ser√° exibida com duas abas: "Sistema" e "Documenta√ß√£o". Certifique-se de estar na aba "Sistema" para interagir com as funcionalidades.

        2.  **Selecione o Tipo de Ranking (na aba "Sistema"):**
            *   Voc√™ ver√° duas op√ß√µes de r√°dio: "Ranking com Dados Externos" e "Ranking com Dados Internos".
            *   Escolha a op√ß√£o desejada.

        3.  **Para "Ranking com Dados Externos":**
            *   **Baixar Template (Opcional, mas Recomendado):**
                *   Clique em "Baixar Arquivo Excel" na se√ß√£o "Template de Candidatos" para obter o modelo formatado.
                *   Preencha este template com os dados dos seus candidatos.
            *   **Upload do Arquivo Excel:**
                *   Na se√ß√£o "Carregue sua Planilha de Candidatos", clique no bot√£o "Escolha um arquivo Excel".
                *   Selecione o arquivo `.xlsx` do seu computador que cont√©m os dados dos candidatos.
                *   **Observa√ß√£o:** O arquivo deve conter uma aba chamada `candidatos` e as colunas obrigat√≥rias: `id_candidato`, `nome_candidato`, `senioridade`, `curriculo`. O sistema realizar√° valida√ß√µes e informar√° sobre quaisquer problemas.
            *   **Visualiza√ß√£o e Valida√ß√£o dos Dados:**
                *   Se o arquivo for carregado com sucesso e passar nas valida√ß√µes iniciais, uma mensagem de sucesso ser√° exibida.
                *   Ap√≥s o upload bem-sucedido, uma pr√©via dos dados dos candidatos ("Dados dos Candidatos") ser√° exibida em uma tabela.
                *   Se houver muitos candidatos, a tabela ser√° paginada (10 itens por p√°gina). Use os bot√µes "‚¨ÖÔ∏è Anterior" e "Pr√≥xima ‚û°Ô∏è" para navegar pelas p√°ginas.
            *   **Descri√ß√£o da Vaga:**
                *   No campo de texto abaixo de "Descri√ß√£o da Vaga", insira uma descri√ß√£o detalhada da vaga. Quanto mais informa√ß√µes voc√™ fornecer (habilidades, experi√™ncia, responsabilidades), mais preciso poder√° ser o ranking (embora o modelo atual seja uma simula√ß√£o).
            *   **N√∫mero de Candidatos para o Ranking:**
                *   Utilize o controle deslizante ("Selecione o n√∫mero de candidatos que deseja retornar:") para definir quantos dos melhores candidatos voc√™ deseja ver no ranking final. O valor padr√£o √© calculado automaticamente como um percentual do total de candidatos carregados (20% para >50, 10% para >100, 5% para >200, 2% para >500 candidatos).
            *   **Gerar Ranking:**
                *   Ap√≥s preencher a descri√ß√£o da vaga e selecionar o n√∫mero de candidatos, clique no bot√£o "Criar Ranking".
            *   **Visualizar Resultado:**
                *   O sistema processar√° os dados e exibir√° o "Ranking Gerado" em uma nova tabela, mostrando os candidatos selecionados e suas respectivas pontua√ß√µes/ranking.

        4.  **Para "Ranking com Dados Internos":**
            *   Esta op√ß√£o utiliza um conjunto de dados de candidatos internos (atualmente simulados com dados fixos) para gerar o ranking.
            *   **Descri√ß√£o da Vaga:**
                *   No campo de texto abaixo de "Descri√ß√£o da Vaga", insira uma descri√ß√£o detalhada da vaga.
            *   **N√∫mero de Candidatos para o Ranking:**
                *   Utilize o controle deslizante ("Selecione o n√∫mero de candidatos que deseja retornar:") para definir quantos dos melhores candidatos voc√™ deseja ver no ranking final. O valor padr√£o √© 10, com um m√°ximo de 100 (baseado nos dados simulados dispon√≠veis).
            *   **Gerar Ranking:**
                *   Ap√≥s preencher a descri√ß√£o da vaga e selecionar o n√∫mero de candidatos, clique no bot√£o "Criar Ranking".
            *   **Visualizar Resultado:**
                *   O sistema processar√° os dados e exibir√° o "Ranking Gerado" em uma nova tabela, mostrando os candidatos selecionados e suas respectivas pontua√ß√µes/ranking.

        #### Observa√ß√µes Adicionais:        
        *   Certifique-se de que o arquivo Excel carregado esteja no formato correto e contenha os dados esperados para evitar erros. O sistema tentar√° validar a estrutura do arquivo e a presen√ßa de dados nulos.
    ''')

if __name__ == "__main__":
    main()
